% Program = typed functions + main expression
program : { function }* main ;
function : funsig fundef ;
funsig : name '::' type ;
fundef : name { name }* '=' expr ;
type : simpletype { '->' simpletype }* ;
main : 'main' '=' 'print' '$' expr ;

% Simple types
[inttype] simpletype :  'Int' ;
[booltype] simpletype :  'Bool' ;

% Expressions
[binary] expr : '(' binop ')' subexpr subexpr ;
[subexpr] expr : subexpr ;
[apply] expr : name { subexpr }+ ;
[intconst] subexpr : int ;
[brackets] subexpr : '(' expr ')' ;
[if] subexpr : 'if' expr 'then' expr 'else' expr ;
[arg] subexpr : name ;

% Binary operators
[add] binop : '+' ;
[sub] binop : '-' ;
[mul] binop : '*' ;
[eq] binop : '==' ;
